# Enable tab completion
import rlcompleter
import pdb
import os
pdb.Pdb.complete = rlcompleter.Completer(locals()).complete

# Print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.
alias p_ for k in sorted(%1.keys()): print "%s%-15s= %-80.80s" % ("%2",k,repr(%1]))

# Print the member variables of a thing.
alias pi p_ %1.__dict__ %1.

# Print the member variables of self.
alias ps pi self

# Print the locals.
alias pl p_ locals() local:

# Next and list, and step and list.
alias nn n;;l
alias ss s;;l
alias cc c;;l
alias ll u;;d;;l

# Pretty print lists
alias ppl pp list(%1)

# Print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.
alias pd for k in sorted(%1.keys()): print "%s%-15s= %-80.80s" % ("  ",k,repr(%1[k]))

alias pc for k,v in sorted({k:v for cls in reversed(%1.__class__.__mro__) for k,v in cls.__dict__.items() if cls is not object}.items()): print("%s%-20s= %-80.80s" % ("%1.",k,repr(v)))

# allow multiline statesemnts
alias shell !import code; code.interact(local=vars())

# Show python help
alias ph !help(%1)
alias help2 p 'pi ps pl pc pd ppl nn ss cc ll'

# Overridden alias
alias redefined p 'home definition'

# .pdbrc only allows for debugger commands; you cannot insert Python
# scripts.
#
# To overcome this restriction, this .pdbrc executes ~/.pdbrc.py,
# which can contain arbitrary Python commands (including a call to a
# local pdbrc.py (no leading dot!) in your working directory if it
# exists).
#
# If ~/.pdbrc.py is missing, you get an error message (which doesn't
# hurt).
#
# with open(os.path.expanduser("~/.python/pdbrc.py"), "r") as fd:
    # exec(fd.read())
#execfile("c:/cygwin64/home/dcollins/.python/pdbrc.py")
